/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  document: Array<Document | null>;
  secrets: Secrets;
  user: AuthUser;
}

export interface Document {
  createdAt: number;
  folder?: string;
  hash: string;
  id: string;
  name: string;
  node: Array<Node | null>;
  size: number;
  status?: string;
  updatedAt: number;
}

export interface Node {
  child_nodes: Array<number>;
  createdAt: number;
  documentId: string;
  fatherId?: string;
  father_id: number;
  html: string;
  icon_id: string;
  id: string;
  image: Array<Image | null>;
  is_empty: number;
  is_richtxt: number;
  name: string;
  node_id: number;
  node_title_styles?: string;
  read_only: number;
  updatedAt: number;
}

export interface Image {
  base64: string;
  id: string;
}

export interface Secrets {
  google_api_key: string;
  google_client_id: string;
}

export interface AuthUser {
  token: string;
  user: User;
}

export interface User {
  email: string;
  email_verified: boolean;
  firstName: string;
  id: string;
  lastName: string;
  picture?: string;
  thirdPartyId?: string;
  username: string;
}

export interface Mutation {
  document: DocumentMutation;
  user: UserMutation;
}

export interface DocumentMutation {
  deleteDocument: string;
  node: NodeMutation;
  uploadFile: boolean;
  uploadLink: boolean;
}

export interface DeleteDocumentInputType {
  IDs: Array<string>;
}

export interface NodeMutation {
  createNode: string;
  deleteNode: string;
  meta: string;
  saveAHtml: string;
}

export interface CreateNodeIt {
  child_nodes: Array<number>;
  createdAt: number;
  documentId: string;
  father_id: number;
  icon_id: string;
  name: string;
  node_id: number;
  node_title_styles?: string;
  position?: number;
  read_only: number;
  updatedAt: number;
}

export interface NodeMetaIt {
  child_nodes?: Array<number | null>;
  fatherId?: string;
  father_id?: number;
  icon_id?: string;
  is_richtxt?: number;
  name?: string;
  node_title_styles?: string;
  position?: number;
  read_only?: number;
  sequence?: number;
}

/**
 * The `Upload` scalar type represents a file upload.
 */
export type Upload = any;

export interface UploadLinkInputType {
  IDs: Array<string>;
  access_token: string;
}

export interface UserMutation {
  signIn: AuthUser;
  signUp: AuthUser;
}

export interface SignInCredentials {
  emailOrUsername: string;
  password: string;
}

export interface SignUpCredentials {
  email: string;
  firstName: string;
  lastName: string;
  password: string;
  username: string;
}

export interface Subscription {
  document: DocumentSubscription;
}

export interface DocumentSubscription {
  documentId: string;
  documentName: string;
  eventType: DOCUMENT_SUBSCRIPTIONS;
}

export enum DOCUMENT_SUBSCRIPTIONS {
  DOCUMENT_IMPORT_DELETED = 'DOCUMENT_IMPORT_DELETED',
  DOCUMENT_IMPORT_DUPLICATE = 'DOCUMENT_IMPORT_DUPLICATE',
  DOCUMENT_IMPORT_FAILED = 'DOCUMENT_IMPORT_FAILED',
  DOCUMENT_IMPORT_FINISHED = 'DOCUMENT_IMPORT_FINISHED',
  DOCUMENT_IMPORT_PENDING = 'DOCUMENT_IMPORT_PENDING',
  DOCUMENT_IMPORT_PREPARING = 'DOCUMENT_IMPORT_PREPARING',
  DOCUMENT_IMPORT_STARTED = 'DOCUMENT_IMPORT_STARTED',
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  Document?: DocumentTypeResolver;
  Node?: NodeTypeResolver;
  Image?: ImageTypeResolver;
  Secrets?: SecretsTypeResolver;
  AuthUser?: AuthUserTypeResolver;
  User?: UserTypeResolver;
  Mutation?: MutationTypeResolver;
  DocumentMutation?: DocumentMutationTypeResolver;
  NodeMutation?: NodeMutationTypeResolver;
  Upload?: GraphQLScalarType;
  UserMutation?: UserMutationTypeResolver;
  Subscription?: SubscriptionTypeResolver;
  DocumentSubscription?: DocumentSubscriptionTypeResolver;
}
export interface QueryTypeResolver<TParent = any> {
  document?: QueryToDocumentResolver<TParent>;
  secrets?: QueryToSecretsResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
}

export interface QueryToDocumentArgs {
  file_id?: string;
}
export interface QueryToDocumentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface QueryToSecretsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTypeResolver<TParent = any> {
  createdAt?: DocumentToCreatedAtResolver<TParent>;
  folder?: DocumentToFolderResolver<TParent>;
  hash?: DocumentToHashResolver<TParent>;
  id?: DocumentToIdResolver<TParent>;
  name?: DocumentToNameResolver<TParent>;
  node?: DocumentToNodeResolver<TParent>;
  size?: DocumentToSizeResolver<TParent>;
  status?: DocumentToStatusResolver<TParent>;
  updatedAt?: DocumentToUpdatedAtResolver<TParent>;
}

export interface DocumentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToFolderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToHashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToNodeArgs {
  node_id?: number;
}
export interface DocumentToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: DocumentToNodeArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeTypeResolver<TParent = any> {
  child_nodes?: NodeToChild_nodesResolver<TParent>;
  createdAt?: NodeToCreatedAtResolver<TParent>;
  documentId?: NodeToDocumentIdResolver<TParent>;
  fatherId?: NodeToFatherIdResolver<TParent>;
  father_id?: NodeToFather_idResolver<TParent>;
  html?: NodeToHtmlResolver<TParent>;
  icon_id?: NodeToIcon_idResolver<TParent>;
  id?: NodeToIdResolver<TParent>;
  image?: NodeToImageResolver<TParent>;
  is_empty?: NodeToIs_emptyResolver<TParent>;
  is_richtxt?: NodeToIs_richtxtResolver<TParent>;
  name?: NodeToNameResolver<TParent>;
  node_id?: NodeToNode_idResolver<TParent>;
  node_title_styles?: NodeToNode_title_stylesResolver<TParent>;
  read_only?: NodeToRead_onlyResolver<TParent>;
  updatedAt?: NodeToUpdatedAtResolver<TParent>;
}

export interface NodeToChild_nodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToDocumentIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToFatherIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToFather_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToHtmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToIcon_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToImageArgs {
  thumbnail?: boolean;
}
export interface NodeToImageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: NodeToImageArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeToIs_emptyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToIs_richtxtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToNode_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToNode_title_stylesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToRead_onlyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageTypeResolver<TParent = any> {
  base64?: ImageToBase64Resolver<TParent>;
  id?: ImageToIdResolver<TParent>;
}

export interface ImageToBase64Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecretsTypeResolver<TParent = any> {
  google_api_key?: SecretsToGoogle_api_keyResolver<TParent>;
  google_client_id?: SecretsToGoogle_client_idResolver<TParent>;
}

export interface SecretsToGoogle_api_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecretsToGoogle_client_idResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthUserTypeResolver<TParent = any> {
  token?: AuthUserToTokenResolver<TParent>;
  user?: AuthUserToUserResolver<TParent>;
}

export interface AuthUserToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthUserToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTypeResolver<TParent = any> {
  email?: UserToEmailResolver<TParent>;
  email_verified?: UserToEmail_verifiedResolver<TParent>;
  firstName?: UserToFirstNameResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  lastName?: UserToLastNameResolver<TParent>;
  picture?: UserToPictureResolver<TParent>;
  thirdPartyId?: UserToThirdPartyIdResolver<TParent>;
  username?: UserToUsernameResolver<TParent>;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmail_verifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPictureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToThirdPartyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationTypeResolver<TParent = any> {
  document?: MutationToDocumentResolver<TParent>;
  user?: MutationToUserResolver<TParent>;
}

export interface MutationToDocumentArgs {
  file_id?: string;
}
export interface MutationToDocumentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface MutationToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentMutationTypeResolver<TParent = any> {
  deleteDocument?: DocumentMutationToDeleteDocumentResolver<TParent>;
  node?: DocumentMutationToNodeResolver<TParent>;
  uploadFile?: DocumentMutationToUploadFileResolver<TParent>;
  uploadLink?: DocumentMutationToUploadLinkResolver<TParent>;
}

export interface DocumentMutationToDeleteDocumentArgs {
  documents: DeleteDocumentInputType;
}
export interface DocumentMutationToDeleteDocumentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: DocumentMutationToDeleteDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentMutationToNodeArgs {
  node_id: string;
}
export interface DocumentMutationToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: DocumentMutationToNodeArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentMutationToUploadFileArgs {
  files: Array<Upload>;
}
export interface DocumentMutationToUploadFileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: DocumentMutationToUploadFileArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentMutationToUploadLinkArgs {
  file: UploadLinkInputType;
}
export interface DocumentMutationToUploadLinkResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: DocumentMutationToUploadLinkArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeMutationTypeResolver<TParent = any> {
  createNode?: NodeMutationToCreateNodeResolver<TParent>;
  deleteNode?: NodeMutationToDeleteNodeResolver<TParent>;
  meta?: NodeMutationToMetaResolver<TParent>;
  saveAHtml?: NodeMutationToSaveAHtmlResolver<TParent>;
}

export interface NodeMutationToCreateNodeArgs {
  meta: CreateNodeIt;
}
export interface NodeMutationToCreateNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: NodeMutationToCreateNodeArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeMutationToDeleteNodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeMutationToMetaArgs {
  meta: NodeMetaIt;
}
export interface NodeMutationToMetaResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: NodeMutationToMetaArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeMutationToSaveAHtmlArgs {
  ahtml: string;
  deletedImages: Array<string | null>;
}
export interface NodeMutationToSaveAHtmlResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: NodeMutationToSaveAHtmlArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationTypeResolver<TParent = any> {
  signIn?: UserMutationToSignInResolver<TParent>;
  signUp?: UserMutationToSignUpResolver<TParent>;
}

export interface UserMutationToSignInArgs {
  credentials: SignInCredentials;
}
export interface UserMutationToSignInResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserMutationToSignInArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToSignUpArgs {
  credentials: SignUpCredentials;
}
export interface UserMutationToSignUpResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserMutationToSignUpArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface SubscriptionTypeResolver<TParent = any> {
  document?: SubscriptionToDocumentResolver<TParent>;
}

export interface SubscriptionToDocumentArgs {
  userId: string;
}
export interface SubscriptionToDocumentResolver<TParent = any, TResult = any> {
  resolve?: (
    parent: TParent,
    args: SubscriptionToDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ) => TResult;
  subscribe: (
    parent: TParent,
    args: SubscriptionToDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ) => AsyncIterator<TResult>;
}

export interface DocumentSubscriptionTypeResolver<TParent = any> {
  documentId?: DocumentSubscriptionToDocumentIdResolver<TParent>;
  documentName?: DocumentSubscriptionToDocumentNameResolver<TParent>;
  eventType?: DocumentSubscriptionToEventTypeResolver<TParent>;
}

export interface DocumentSubscriptionToDocumentIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentSubscriptionToDocumentNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentSubscriptionToEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
