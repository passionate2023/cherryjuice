# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type AuthUser {
    token: String!
    user: User!
}

type Document {
    createdAt: Float!
    folder: String
    hash: String
    id: String!
    name: String!
    node(node_id: Int): [Node]!
    size: Int!
    status: String
    updatedAt: Float!
}

type DocumentMutation {
    createDocument(document: CreateDocumentIt!): String!
    deleteDocument(documents: DeleteDocumentInputType!): String!
    editDocument(meta: EditDocumentIt!): String!
    exportDocument: String!
    node(node_id: Int!): NodeMutation!
    uploadFile(files: [CTBUpload!]!): Boolean!
    uploadLink(file: UploadLinkInputType!): Boolean!
}

type DocumentSubscription {
    hash: ID!
    id: ID!
    name: ID!
    status: DOCUMENT_SUBSCRIPTIONS!
}

type Image {
    base64: String!
    id: String!
}

type Mutation {
    document(file_id: String): DocumentMutation!
    user: UserMutation!
}

type Node {
    child_nodes: [Int!]!
    createdAt: Float!
    documentId: String!
    fatherId: String
    father_id: Float!
    hash: String!
    html: String!
    id: String!
    image(thumbnail: Boolean): [Image]!
    name: String!
    node_id: Int!
    node_title_styles: String
    read_only: Int!
    updatedAt: Float!
}

type NodeMutation {
    createNode(meta: CreateNodeIt!): String!
    deleteNode: String!
    meta(meta: NodeMetaIt!): String!
    saveAHtml(data: SaveHtmlIt!): String!
    uploadImage(images: [ImageUpload!]!): [[String!]!]!
}

type NodeSearchResultEntity {
    documentId: String!
    documentName: String!
    headline: String!
    nodeId: String!
    nodeName: String!
    node_id: Int!
}

type Query {
    document(file_id: String): [Document]!
    search: SearchResultEntity!
    secrets: Secrets!
    user: AuthUser!
}

type SearchResultEntity {
    node(searchArgs: NodeSearchIt): [NodeSearchResultEntity!]!
}

type Secrets {
    google_api_key: String!
    google_client_id: String!
}

type Subscription {
    document(userId: String!): DocumentSubscription!
}

type User {
    email: String!
    email_verified: Boolean!
    firstName: String!
    id: String!
    lastName: String!
    picture: String
    thirdPartyId: String
    username: String!
}

type UserMutation {
    signIn(credentials: SignInCredentials!): AuthUser!
    signUp(credentials: SignUpCredentials!): AuthUser!
}

enum DOCUMENT_SUBSCRIPTIONS {
    DELETED
    EXPORT_FAILED
    EXPORT_FINISHED
    EXPORT_IMAGES_STARTED
    EXPORT_NODES_STARTED
    EXPORT_PENDING
    EXPORT_PREPARING
    IMPORT_DUPLICATE
    IMPORT_FAILED
    IMPORT_FINISHED
    IMPORT_PENDING
    IMPORT_PREPARING
    IMPORT_STARTED
}

input CreateDocumentIt {
    name: String!
}

input CreateNodeIt {
    child_nodes: [Int!]!
    createdAt: Timestamp!
    documentId: String!
    fatherId: String
    father_id: Float!
    name: String!
    node_id: Int!
    node_title_styles: String
    read_only: Int!
    updatedAt: Timestamp!
}

input DeleteDocumentInputType {
    IDs: [String!]!
}

input EditDocumentIt {
    name: String
    updatedAt: Timestamp!
}

input NodeMetaIt {
    child_nodes: [Int]
    fatherId: String
    father_id: Float
    is_richtxt: Int
    name: String
    node_title_styles: String
    position: Int
    read_only: Int
    sequence: Float
    updatedAt: Timestamp!
}

input NodeSearchIt {
    documentId: String!
    nodeId: String!
    query: String!
    searchScope: String!
    searchType: [String!]!
}

input SaveHtmlIt {
    ahtml: String!
    deletedImages: [String]!
    updatedAt: Timestamp!
}

input SignInCredentials {
    emailOrUsername: String!
    password: String!
}

input SignUpCredentials {
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    username: String!
}

input UploadLinkInputType {
    IDs: [String!]!
    access_token: String!
}


"The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch."
scalar Timestamp

"The ImageUpload scalar type represents a file upload."
scalar ImageUpload

"The CTBUpload scalar type represents a file upload."
scalar CTBUpload