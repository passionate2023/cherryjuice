# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type AuthUser {
    token: String!
    user: User!
}

type Document {
    createdAt: Float!
    folder: String
    hash: String!
    id: String!
    name: String!
    node(node_id: Int): [Node]!
    size: Int!
    status: String
    updatedAt: Float!
}

type DocumentMutation {
    deleteDocument(documents: DeleteDocumentInputType!): String!
    node(node_id: String!): NodeMutation!
    uploadFile(files: [Upload!]!): Boolean!
    uploadLink(file: UploadLinkInputType!): Boolean!
}

type DocumentSubscription {
    documentId: ID!
    documentName: ID!
    eventType: DOCUMENT_SUBSCRIPTIONS!
}

type Image {
    base64: String!
    id: String!
}

type Mutation {
    document(file_id: String): DocumentMutation!
    user: UserMutation!
}

type Node {
    child_nodes: [Int!]!
    createdAt: Float!
    documentId: String!
    father_id: Float!
    html: String!
    icon_id: String!
    id: String!
    image(thumbnail: Boolean): [Image]!
    is_empty: Int!
    is_richtxt: Int!
    name: String!
    node_id: Int!
    node_title_styles: String
    read_only: Int!
    updatedAt: Float!
}

type NodeMutation {
    createNode(meta: CreateNodeIt!): String!
    meta(meta: NodeMetaIt!): String!
    saveAHtml(ahtml: String!, deletedImages: [String]!): String!
}

type Query {
    document(file_id: String): [Document]!
    secrets: Secrets!
    user: AuthUser!
}

type Secrets {
    google_api_key: String!
    google_client_id: String!
}

type Subscription {
    document(userId: String!): DocumentSubscription!
}

type User {
    email: String!
    email_verified: Boolean!
    firstName: String!
    id: String!
    lastName: String!
    picture: String
    thirdPartyId: String
    username: String!
}

type UserMutation {
    signIn(credentials: SignInCredentials!): AuthUser!
    signUp(credentials: SignUpCredentials!): AuthUser!
}

enum DOCUMENT_SUBSCRIPTIONS {
    DOCUMENT_IMPORT_DELETED
    DOCUMENT_IMPORT_DUPLICATE
    DOCUMENT_IMPORT_FAILED
    DOCUMENT_IMPORT_FINISHED
    DOCUMENT_IMPORT_PENDING
    DOCUMENT_IMPORT_PREPARING
    DOCUMENT_IMPORT_STARTED
}

input CreateNodeIt {
    child_nodes: [Int!]!
    createdAt: Float!
    documentId: String!
    father_id: Float!
    icon_id: String!
    name: String!
    node_id: Int!
    node_title_styles: String
    read_only: Int!
    updatedAt: Float!
}

input DeleteDocumentInputType {
    IDs: [String!]!
}

input NodeMetaIt {
    child_nodes: [Int]
    father_id: Float
    icon_id: String
    is_richtxt: Int
    name: String
    node_title_styles: String
    read_only: Int
    sequence: Float
}

input SignInCredentials {
    emailOrUsername: String!
    password: String!
}

input SignUpCredentials {
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    username: String!
}

input UploadLinkInputType {
    IDs: [String!]!
    access_token: String!
}


"The `Upload` scalar type represents a file upload."
scalar Upload