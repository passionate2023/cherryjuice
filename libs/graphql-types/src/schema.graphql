# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type AuthUser {
    secrets: Secrets!
    settings: Settings!
    token: String!
    user: User!
}

type Document {
    createdAt: Float!
    exportDocument: String!
    folder: String
    guests: [DocumentGuestOt]
    hash: String
    id: String!
    name: String!
    node(node_ids: [Int]): [Node]!
    privacy: Privacy!
    privateNodes: [PrivateNode!]!
    size: Int!
    state: DocumentState!
    status: String
    updatedAt: Float!
    userId: String!
}

type DocumentGuestOt {
    accessLevel: AccessLevel!
    email: String!
    userId: String!
}

type DocumentMutation {
    clone: String!
    createDocument(document: CreateDocumentIt!): String!
    deleteDocument(documents: DeleteDocumentInputType!): String!
    editDocument(meta: EditDocumentIt!): String!
    node(node_id: Int): NodeMutation!
    setState(state: DocumentStateIt!): String!
    uploadFile(files: [CTBUpload!]!): Boolean!
    uploadFromGDrive(file: UploadLinkInputType!): Boolean!
}

type DocumentOperation {
    context: OPERATION_CONTEXT
    id: String!
    progress: Float
    state: OPERATION_STATE!
    target: DocumentTarget!
    type: OPERATION_TYPE!
    userId: String!
}

type DocumentState {
    bookmarks: [Int!]!
    lastOpenedAt: Timestamp!
    recentNodes: [Int!]!
    scrollPositions: [NodeScrollPosition!]!
    selectedNode_id: Int!
    treeState: [Int!]!
    updatedAt: Timestamp!
}

type DocumentTarget {
    hash: String
    id: String!
    name: String
}

type EditorSettings {
    codeBg: String!
    codeFont: String!
    codeFontSize: String!
    monospaceBg: String!
    richTextBg: String!
    richTextColor: String!
    richTextFont: String!
    richTextFontSize: String!
    treeBg: String!
    treeColor: String!
    treeFont: String!
    treeFontSize: String!
    version: Float!
}

type HotKey {
    keys: String
    type: HotKeyActionType!
}

type HotKeys {
    formatting: [HotKey!]!
    general: [HotKey!]!
}

type Image {
    base64: String!
    id: String!
}

type Mutation {
    document(file_id: String): DocumentMutation!
    user: UserMutation!
}

type Node {
    child_nodes: [Int!]!
    createdAt: Float!
    documentId: String!
    fatherId: String
    father_id: Float!
    hash: String!
    html: String!
    id: String!
    image(thumbnail: Boolean): [Image]!
    name: String!
    node_id: Int!
    node_title_styles: String
    privacy: NodePrivacy
    read_only: Int!
    tags: String
    updatedAt: Float!
}

type NodeMutation {
    createNode(meta: CreateNodeIt!): String!
    deleteNode: String!
    editMeta(meta: [NodeMetaIt!]!): [ID!]!
    saveAHtml(data: SaveHtmlIt!): String!
    uploadImage(images: [ImageUpload!]!): [[String!]!]!
}

type NodeScrollPosition {
    node_id: Int!
    x: Int!
    y: Int!
}

type NodeSearchResultEntity {
    ahtmlHeadline: String
    ahtml_txt: String
    createdAt: Timestamp!
    documentId: String!
    documentName: String!
    nodeId: String!
    nodeName: String!
    nodeNameHeadline: String
    node_id: Int!
    tags: String
    tagsHeadline: String
    updatedAt: Timestamp!
}

type NodeSearchResults {
    meta: SearchResultMeta!
    results: [NodeSearchResultEntity]!
}

type PrivateNode {
    father_id: Float!
    node_id: Float!
}

type Query {
    document(file_id: String): [Document]!
    search: SearchResultEntity!
    user: UserQuery!
}

type SearchResultEntity {
    node(searchArgs: NodeSearchIt): NodeSearchResults!
}

type SearchResultMeta {
    elapsedTimeMs: Int!
    timestamp: Timestamp!
}

type Secrets {
    google_api_key: String!
    google_client_id: String!
}

type Settings {
    editorSettings: EditorSettings!
    hotKeys: HotKeys!
}

type Subscription {
    documentOperation(userId: String!): DocumentOperation!
}

type User {
    email: String!
    email_verified: Boolean!
    firstName: String!
    hasPassword: Boolean!
    id: String!
    lastName: String!
    picture: String
    tokens: [UserToken]!
    username: String!
}

type UserMutation {
    cancelEmailChangeToken(input: CancelChangeEmailIt!): Timestamp!
    changeEmail(input: ConfirmEmailChangeIt!): Timestamp!
    createEmailChangeToken(input: ChangeEmailIt!): Timestamp!
    createEmailVerificationToken: Timestamp!
    createPasswordResetToken(email: String!, username: String!): Timestamp!
    deleteAccount(currentPassword: String!): String!
    oauthSignUp(credentials: OauthSignUpCredentials!): AuthUser!
    resetPassword(input: ResetPasswordIt!): Timestamp!
    signIn(credentials: SignInCredentials!): AuthUser!
    signUp(credentials: SignUpCredentials!): AuthUser!
    updateUserProfile(userProfile: UpdateUserProfileIt!): AuthUser!
    updateUserSettings(userSettings: UpdateUserSettingsIt!): AuthUser!
    verifyEmail(input: VerifyEmailIt!): Timestamp!
}

type UserQuery {
    refreshToken: AuthUser!
    userExists(email: String!): String
    verifyTokenValidity(token: String!): Timestamp!
}

type UserToken {
    id: String!
    meta: UserTokenMeta
    type: UserTokenType!
}

type UserTokenMeta {
    currentEmail: String
    newEmail: String
}

enum AccessLevel {
    READER
    WRITER
}

enum HotKeyActionType {
    BACKGROUND_COLOR
    BOLD
    CREATE_TEST_SAMPLE
    DELETE_LINE
    FOREGROUND_COLOR
    H1
    H2
    H3
    INSERT_ANCHOR
    INSERT_LINK
    ITALIC
    JUSTIFY_CENTER
    JUSTIFY_FILL
    JUSTIFY_LEFT
    JUSTIFY_RIGHT
    LINE_THROUGH
    MONO
    MOVE_LINE_DOWN
    MOVE_LINE_UP
    REDO
    RELOAD_DOCUMENT
    REMOVE_STYLE
    SAVE_DOCUMENT
    SHOW_CREATE_DOCUMENT
    SHOW_CREATE_SIBLING_NODE
    SHOW_DOCUMENTS_LIST
    SHOW_IMPORT_DOCUMENTS
    SMALL
    SUB
    SUP
    UNDERLINE
    UNDO
}

enum NodePrivacy {
    DEFAULT
    GUESTS_ONLY
    PRIVATE
    PUBLIC
}

enum OPERATION_CONTEXT {
    IMAGES
    NODES
}

enum OPERATION_STATE {
    DUPLICATE
    FAILED
    FINISHED
    PENDING
    PREPARING
    STARTED
}

enum OPERATION_TYPE {
    CACHE
    CLONE
    DELETE
    EXPORT
    IMPORT
}

enum Privacy {
    GUESTS_ONLY
    PRIVATE
    PUBLIC
}

enum SearchScope {
    allDocuments
    childNodes
    currentDocument
    currentNode
}

enum SearchTarget {
    nodeContent
    nodeTags
    nodeTitle
}

enum SearchType {
    FullText
    Regex
    Simple
}

enum SortDirection {
    Ascending
    Descending
}

enum SortNodesBy {
    CreatedAt
    DocumentName
    NodeName
    UpdatedAt
}

enum TimeRange {
    AnyTime
    CustomRange
    PastDay
    PastHour
    PastMonth
    PastWeek
    PastYear
}

enum UserTokenType {
    EMAIL_CHANGE
    EMAIL_VERIFICATION
    PASSWORD_RESET
}

input CancelChangeEmailIt {
    tokenId: String!
}

input ChangeEmailIt {
    email: String!
}

input ConfirmEmailChangeIt {
    token: String!
}

input CreateDocumentIt {
    guests: [DocumentGuestIt]!
    name: String!
    privacy: Privacy!
}

input CreateNodeIt {
    child_nodes: [Int!]!
    createdAt: Timestamp!
    fatherId: String
    father_id: Float!
    name: String!
    node_id: Int!
    node_title_styles: String
    privacy: NodePrivacy
    read_only: Int!
    tags: String
    updatedAt: Timestamp!
}

input DeleteDocumentInputType {
    IDs: [String!]!
}

input DocumentGuestIt {
    accessLevel: AccessLevel!
    email: String!
    userId: String!
}

input DocumentStateIt {
    bookmarks: [Int!]!
    lastOpenedAt: Timestamp!
    recentNodes: [Int!]!
    scrollPositions: [NodeScrollPositionIt!]!
    selectedNode_id: Int!
    treeState: [Int!]!
    updatedAt: Timestamp!
}

input EditDocumentIt {
    guests: [DocumentGuestIt]
    name: String
    privacy: Privacy
    updatedAt: Timestamp!
}

input EditorSettingsIt {
    codeBg: String!
    codeFont: String!
    codeFontSize: String!
    monospaceBg: String!
    richTextBg: String!
    richTextColor: String!
    richTextFont: String!
    richTextFontSize: String!
    treeBg: String!
    treeColor: String!
    treeFont: String!
    treeFontSize: String!
    version: Float!
}

input HotKeyIt {
    keys: String
    type: HotKeyActionType!
}

input HotKeysIt {
    formatting: [HotKeyIt!]!
    general: [HotKeyIt!]!
}

input NodeMetaIt {
    child_nodes: [Int]
    fatherId: String
    father_id: Float
    is_richtxt: Int
    name: String
    node_id: Int!
    node_title_styles: String
    position: Int
    privacy: NodePrivacy
    read_only: Int
    sequence: Float
    tags: String
    updatedAt: Timestamp!
}

input NodeScrollPositionIt {
    node_id: Int!
    x: Int!
    y: Int!
}

input NodeSearchIt {
    createdAtTimeFilter: TimeFilter!
    documentId: String!
    nodeId: String!
    query: String!
    searchOptions: SearchOptions!
    searchScope: SearchScope!
    searchTarget: [SearchTarget!]!
    searchType: SearchType!
    sortOptions: SearchSortOptions!
    updatedAtTimeFilter: TimeFilter!
}

input OauthSignUpCredentials {
    password: String!
    username: String!
}

input ResetPasswordIt {
    newPassword: String!
    token: String!
}

input SaveHtmlIt {
    ahtml: String!
    deletedImages: [String]!
    updatedAt: Timestamp!
}

input SearchOptions {
    caseSensitive: Boolean!
    fullWord: Boolean!
}

input SearchSortOptions {
    sortBy: SortNodesBy!
    sortDirection: SortDirection!
}

input SignInCredentials {
    emailOrUsername: String!
    password: String!
}

input SignUpCredentials {
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    username: String!
}

input TimeFilter {
    rangeEnd: Timestamp!
    rangeName: TimeRange!
    rangeStart: Timestamp!
}

input UpdateUserProfileIt {
    currentPassword: String!
    email: String
    firstName: String
    lastName: String
    newPassword: String
    username: String
}

input UpdateUserSettingsIt {
    editorSettings: EditorSettingsIt
    hotKeys: HotKeysIt
}

input UploadLinkInputType {
    IDs: [String!]!
    access_token: String!
}

input VerifyEmailIt {
    token: String!
}


"The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch."
scalar Timestamp

"The ImageUpload scalar type represents a file upload."
scalar ImageUpload

"The CTBUpload scalar type represents a file upload."
scalar CTBUpload