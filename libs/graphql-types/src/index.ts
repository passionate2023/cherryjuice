/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  document: Array<Document | null>;
  search: SearchResultEntity;
  user: UserQuery;
  userMeta: UserMetaQueries;
}

export interface Document {
  createdAt: number;
  exportDocument: string;
  folderId?: string;
  guests?: Array<DocumentGuestOt | null>;
  hash?: string;
  id: string;
  name: string;
  node: Array<Node | null>;
  privacy: Privacy;
  privateNodes: Array<PrivateNode>;
  size: number;
  state: DocumentState;
  status?: string;
  updatedAt: number;
  userId: string;
}

export interface DocumentGuestOt {
  accessLevel: AccessLevel;
  email: string;
  userId: string;
}

export enum AccessLevel {
  READER = 'READER',
  WRITER = 'WRITER',
}

export interface Node {
  child_nodes: Array<number>;
  createdAt: number;
  documentId: string;
  fatherId?: string;
  father_id: number;
  hash: string;
  html: string;
  id: string;
  image: Array<Image | null>;
  name: string;
  node_id: number;
  node_title_styles?: string;
  privacy?: NodePrivacy;
  read_only: number;
  tags?: string;
  updatedAt: number;
}

export interface Image {
  base64: string;
  id: string;
}

export enum NodePrivacy {
  DEFAULT = 'DEFAULT',
  GUESTS_ONLY = 'GUESTS_ONLY',
  PRIVATE = 'PRIVATE',
  PUBLIC = 'PUBLIC',
}

export enum Privacy {
  GUESTS_ONLY = 'GUESTS_ONLY',
  PRIVATE = 'PRIVATE',
  PUBLIC = 'PUBLIC',
}

export interface PrivateNode {
  father_id: number;
  node_id: number;
}

export interface DocumentState {
  bookmarks: Array<number>;
  lastOpenedAt: Timestamp;
  pinned: boolean;
  recentNodes: Array<number>;
  scrollPositions: Array<NodeScrollPosition>;
  selectedNode_id: number;
  treeState: Array<number>;
  updatedAt: Timestamp;
}

/**
 * The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
 */
export type Timestamp = any;

export interface NodeScrollPosition {
  node_id: number;
  x: number;
  y: number;
}

export interface SearchResultEntity {
  node: NodeSearchResults;
}

export interface NodeSearchIt {
  createdAtTimeFilter: TimeFilter;
  documentId: string;
  nodeId: string;
  query: string;
  searchOptions: SearchOptions;
  searchScope: SearchScope;
  searchTarget: Array<SearchTarget>;
  searchType: SearchType;
  sortOptions: SearchSortOptions;
  updatedAtTimeFilter: TimeFilter;
}

export interface TimeFilter {
  rangeEnd: Timestamp;
  rangeName: TimeRange;
  rangeStart: Timestamp;
}

export enum TimeRange {
  AnyTime = 'AnyTime',
  CustomRange = 'CustomRange',
  PastDay = 'PastDay',
  PastHour = 'PastHour',
  PastMonth = 'PastMonth',
  PastWeek = 'PastWeek',
  PastYear = 'PastYear',
}

export interface SearchOptions {
  caseSensitive: boolean;
  fullWord: boolean;
}

export enum SearchScope {
  allDocuments = 'allDocuments',
  childNodes = 'childNodes',
  currentDocument = 'currentDocument',
  currentNode = 'currentNode',
}

export enum SearchTarget {
  nodeContent = 'nodeContent',
  nodeTags = 'nodeTags',
  nodeTitle = 'nodeTitle',
}

export enum SearchType {
  FullText = 'FullText',
  Regex = 'Regex',
  Simple = 'Simple',
}

export interface SearchSortOptions {
  sortBy: SortNodesBy;
  sortDirection: SortDirection;
}

export enum SortNodesBy {
  CreatedAt = 'CreatedAt',
  DocumentName = 'DocumentName',
  NodeName = 'NodeName',
  UpdatedAt = 'UpdatedAt',
}

export enum SortDirection {
  Ascending = 'Ascending',
  Descending = 'Descending',
}

export interface NodeSearchResults {
  meta: SearchResultMeta;
  results: Array<NodeSearchResultEntity | null>;
}

export interface SearchResultMeta {
  elapsedTimeMs: number;
  timestamp: Timestamp;
}

export interface NodeSearchResultEntity {
  ahtmlHeadline?: string;
  ahtml_txt?: string;
  createdAt: Timestamp;
  documentId: string;
  documentName: string;
  nodeId: string;
  nodeName: string;
  nodeNameHeadline?: string;
  node_id: number;
  tags?: string;
  tagsHeadline?: string;
  updatedAt: Timestamp;
}

export interface UserQuery {
  refreshToken: AuthUser;
  userExists?: string;
  verifyTokenValidity: Timestamp;
}

export interface AuthUser {
  secrets: Secrets;
  settings: Settings;
  token: string;
  user: User;
}

export interface Secrets {
  google_api_key: string;
  google_client_id: string;
}

export interface Settings {
  editorSettings: EditorSettings;
  hotKeys: HotKeys;
}

export interface EditorSettings {
  codeBg: string;
  codeFont: string;
  codeFontSize: string;
  monospaceBg: string;
  richTextBg: string;
  richTextColor: string;
  richTextFont: string;
  richTextFontSize: string;
  treeBg: string;
  treeColor: string;
  treeFont: string;
  treeFontSize: string;
  version: number;
}

export interface HotKeys {
  formatting: Array<HotKey>;
  general: Array<HotKey>;
}

export interface HotKey {
  keys?: string;
  type: HotKeyActionType;
}

export enum HotKeyActionType {
  BACKGROUND_COLOR = 'BACKGROUND_COLOR',
  BOLD = 'BOLD',
  CREATE_TEST_SAMPLE = 'CREATE_TEST_SAMPLE',
  DELETE_LINE = 'DELETE_LINE',
  FOREGROUND_COLOR = 'FOREGROUND_COLOR',
  H1 = 'H1',
  H2 = 'H2',
  H3 = 'H3',
  INSERT_ANCHOR = 'INSERT_ANCHOR',
  INSERT_LINK = 'INSERT_LINK',
  ITALIC = 'ITALIC',
  JUSTIFY_CENTER = 'JUSTIFY_CENTER',
  JUSTIFY_FILL = 'JUSTIFY_FILL',
  JUSTIFY_LEFT = 'JUSTIFY_LEFT',
  JUSTIFY_RIGHT = 'JUSTIFY_RIGHT',
  LINE_THROUGH = 'LINE_THROUGH',
  MONO = 'MONO',
  MOVE_LINE_DOWN = 'MOVE_LINE_DOWN',
  MOVE_LINE_UP = 'MOVE_LINE_UP',
  REDO = 'REDO',
  RELOAD_DOCUMENT = 'RELOAD_DOCUMENT',
  REMOVE_STYLE = 'REMOVE_STYLE',
  SAVE_DOCUMENT = 'SAVE_DOCUMENT',
  SHOW_CREATE_DOCUMENT = 'SHOW_CREATE_DOCUMENT',
  SHOW_CREATE_SIBLING_NODE = 'SHOW_CREATE_SIBLING_NODE',
  SHOW_DOCUMENTS_LIST = 'SHOW_DOCUMENTS_LIST',
  SHOW_IMPORT_DOCUMENTS = 'SHOW_IMPORT_DOCUMENTS',
  SMALL = 'SMALL',
  SUB = 'SUB',
  SUP = 'SUP',
  TOGGLE_BULLET_POINT = 'TOGGLE_BULLET_POINT',
  UNDERLINE = 'UNDERLINE',
  UNDO = 'UNDO',
}

export interface User {
  email: string;
  email_verified: boolean;
  firstName: string;
  hasPassword: boolean;
  id: string;
  lastName: string;
  picture?: string;
  tokens: Array<UserToken | null>;
  username: string;
}

export interface UserToken {
  id: string;
  meta?: UserTokenMeta;
  type: UserTokenType;
}

export interface UserTokenMeta {
  currentEmail?: string;
  newEmail?: string;
}

export enum UserTokenType {
  EMAIL_CHANGE = 'EMAIL_CHANGE',
  EMAIL_VERIFICATION = 'EMAIL_VERIFICATION',
  PASSWORD_RESET = 'PASSWORD_RESET',
}

export interface UserMetaQueries {
  folders: Array<Folder>;
  id: string;
  workspace: Workspace;
}

export interface Folder {
  id: string;
  name: string;
  settings: FolderSettings;
  userId: string;
}

export interface FolderSettings {
  icon?: string;
  sortDocumentsBy: SortDocumentsBy;
}

export enum SortDocumentsBy {
  CreatedAt = 'CreatedAt',
  DocumentName = 'DocumentName',
  Size = 'Size',
  UpdatedAt = 'UpdatedAt',
}

export interface Workspace {
  currentDocumentId?: string;
  currentFolderId?: string;
  currentScreen: Screen;
  folders: Array<string>;
}

export enum Screen {
  Document = 'Document',
  Home = 'Home',
}

export interface Mutation {
  document: DocumentMutation;
  user: UserMutation;
  userMeta: UserMetaMutations;
}

export interface DocumentMutation {
  clone: string;
  createDocument: string;
  deleteDocument: string;
  editDocument: string;
  node: NodeMutation;
  setState: string;
  uploadFile: boolean;
  uploadFromGDrive: boolean;
}

export interface CreateDocumentIt {
  folderId: string;
  guests: Array<DocumentGuestIt | null>;
  name: string;
  privacy: Privacy;
}

export interface DocumentGuestIt {
  accessLevel: AccessLevel;
  email: string;
  userId: string;
}

export interface DeleteDocumentInputType {
  IDs: Array<string>;
}

export interface EditDocumentIt {
  folderId?: string;
  guests?: Array<DocumentGuestIt | null>;
  name?: string;
  privacy?: Privacy;
  updatedAt: Timestamp;
}

export interface NodeMutation {
  createNode: string;
  deleteNode: string;
  editMeta: Array<string>;
  saveAHtml: string;
  uploadImage: Array<Array<string>>;
}

export interface CreateNodeIt {
  child_nodes: Array<number>;
  createdAt: Timestamp;
  fatherId?: string;
  father_id: number;
  name: string;
  node_id: number;
  node_title_styles?: string;
  privacy?: NodePrivacy;
  read_only: number;
  tags?: string;
  updatedAt: Timestamp;
}

export interface NodeMetaIt {
  child_nodes?: Array<number | null>;
  fatherId?: string;
  father_id?: number;
  is_richtxt?: number;
  name?: string;
  node_id: number;
  node_title_styles?: string;
  position?: number;
  privacy?: NodePrivacy;
  read_only?: number;
  sequence?: number;
  tags?: string;
  updatedAt: Timestamp;
}

export interface SaveHtmlIt {
  ahtml: string;
  deletedImages: Array<string | null>;
  updatedAt: Timestamp;
}

/**
 * The ImageUpload scalar type represents a file upload.
 */
export type ImageUpload = any;

export interface DocumentStateIt {
  bookmarks: Array<number>;
  lastOpenedAt: Timestamp;
  pinned: boolean;
  recentNodes: Array<number>;
  scrollPositions: Array<NodeScrollPositionIt>;
  selectedNode_id: number;
  treeState: Array<number>;
  updatedAt: Timestamp;
}

export interface NodeScrollPositionIt {
  node_id: number;
  x: number;
  y: number;
}

/**
 * The CTBUpload scalar type represents a file upload.
 */
export type CTBUpload = any;

export interface UploadLinkInputType {
  IDs: Array<string>;
  access_token: string;
}

export interface UserMutation {
  cancelEmailChangeToken: Timestamp;
  changeEmail: Timestamp;
  createEmailChangeToken: Timestamp;
  createEmailVerificationToken: Timestamp;
  createPasswordResetToken: Timestamp;
  deleteAccount: string;
  oauthSignUp: AuthUser;
  resetPassword: Timestamp;
  signIn: AuthUser;
  signUp: AuthUser;
  updateUserProfile: AuthUser;
  updateUserSettings: AuthUser;
  verifyEmail: Timestamp;
}

export interface CancelChangeEmailIt {
  tokenId: string;
}

export interface ConfirmEmailChangeIt {
  token: string;
}

export interface ChangeEmailIt {
  email: string;
}

export interface OauthSignUpCredentials {
  password: string;
  username: string;
}

export interface ResetPasswordIt {
  newPassword: string;
  token: string;
}

export interface SignInCredentials {
  emailOrUsername: string;
  password: string;
}

export interface SignUpCredentials {
  email: string;
  firstName: string;
  lastName: string;
  password: string;
  username: string;
}

export interface UpdateUserProfileIt {
  currentPassword: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  newPassword?: string;
  username?: string;
}

export interface UpdateUserSettingsIt {
  editorSettings?: EditorSettingsIt;
  hotKeys?: HotKeysIt;
}

export interface EditorSettingsIt {
  codeBg: string;
  codeFont: string;
  codeFontSize: string;
  monospaceBg: string;
  richTextBg: string;
  richTextColor: string;
  richTextFont: string;
  richTextFontSize: string;
  treeBg: string;
  treeColor: string;
  treeFont: string;
  treeFontSize: string;
  version: number;
}

export interface HotKeysIt {
  formatting: Array<HotKeyIt>;
  general: Array<HotKeyIt>;
}

export interface HotKeyIt {
  keys?: string;
  type: HotKeyActionType;
}

export interface VerifyEmailIt {
  token: string;
}

export interface UserMetaMutations {
  createFolders?: Void;
  removeFolders?: Void;
  updateFolders?: Void;
}

export interface CreateFolderIt {
  id: string;
  name: string;
  settings: FolderSettingsIt;
  userId: string;
}

export interface FolderSettingsIt {
  icon?: string;
  sortDocumentsBy: SortDocumentsBy;
}

/**
 * Represents NULL values
 */
export type Void = any;

export interface UpdateFolderIt {
  id: string;
  name?: string;
  settings?: FolderSettingsIt;
}

export interface Subscription {
  documentOperation: DocumentOperation;
}

export interface DocumentOperation {
  context?: OPERATION_CONTEXT;
  id: string;
  progress?: number;
  state: OPERATION_STATE;
  target: DocumentTarget;
  type: OPERATION_TYPE;
  userId: string;
}

export enum OPERATION_CONTEXT {
  IMAGES = 'IMAGES',
  NODES = 'NODES',
}

export enum OPERATION_STATE {
  DUPLICATE = 'DUPLICATE',
  FAILED = 'FAILED',
  FINISHED = 'FINISHED',
  PENDING = 'PENDING',
  PREPARING = 'PREPARING',
  STARTED = 'STARTED',
}

export interface DocumentTarget {
  hash?: string;
  id: string;
  name?: string;
}

export enum OPERATION_TYPE {
  CACHE = 'CACHE',
  CLONE = 'CLONE',
  DELETE = 'DELETE',
  EXPORT = 'EXPORT',
  IMPORT = 'IMPORT',
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  Document?: DocumentTypeResolver;
  DocumentGuestOt?: DocumentGuestOtTypeResolver;
  Node?: NodeTypeResolver;
  Image?: ImageTypeResolver;
  PrivateNode?: PrivateNodeTypeResolver;
  DocumentState?: DocumentStateTypeResolver;
  Timestamp?: GraphQLScalarType;
  NodeScrollPosition?: NodeScrollPositionTypeResolver;
  SearchResultEntity?: SearchResultEntityTypeResolver;
  NodeSearchResults?: NodeSearchResultsTypeResolver;
  SearchResultMeta?: SearchResultMetaTypeResolver;
  NodeSearchResultEntity?: NodeSearchResultEntityTypeResolver;
  UserQuery?: UserQueryTypeResolver;
  AuthUser?: AuthUserTypeResolver;
  Secrets?: SecretsTypeResolver;
  Settings?: SettingsTypeResolver;
  EditorSettings?: EditorSettingsTypeResolver;
  HotKeys?: HotKeysTypeResolver;
  HotKey?: HotKeyTypeResolver;
  User?: UserTypeResolver;
  UserToken?: UserTokenTypeResolver;
  UserTokenMeta?: UserTokenMetaTypeResolver;
  UserMetaQueries?: UserMetaQueriesTypeResolver;
  Folder?: FolderTypeResolver;
  FolderSettings?: FolderSettingsTypeResolver;
  Workspace?: WorkspaceTypeResolver;
  Mutation?: MutationTypeResolver;
  DocumentMutation?: DocumentMutationTypeResolver;
  NodeMutation?: NodeMutationTypeResolver;
  ImageUpload?: GraphQLScalarType;
  CTBUpload?: GraphQLScalarType;
  UserMutation?: UserMutationTypeResolver;
  UserMetaMutations?: UserMetaMutationsTypeResolver;
  Void?: GraphQLScalarType;
  Subscription?: SubscriptionTypeResolver;
  DocumentOperation?: DocumentOperationTypeResolver;
  DocumentTarget?: DocumentTargetTypeResolver;
}
export interface QueryTypeResolver<TParent = any> {
  document?: QueryToDocumentResolver<TParent>;
  search?: QueryToSearchResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  userMeta?: QueryToUserMetaResolver<TParent>;
}

export interface QueryToDocumentArgs {
  file_id?: string;
}
export interface QueryToDocumentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface QueryToSearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTypeResolver<TParent = any> {
  createdAt?: DocumentToCreatedAtResolver<TParent>;
  exportDocument?: DocumentToExportDocumentResolver<TParent>;
  folderId?: DocumentToFolderIdResolver<TParent>;
  guests?: DocumentToGuestsResolver<TParent>;
  hash?: DocumentToHashResolver<TParent>;
  id?: DocumentToIdResolver<TParent>;
  name?: DocumentToNameResolver<TParent>;
  node?: DocumentToNodeResolver<TParent>;
  privacy?: DocumentToPrivacyResolver<TParent>;
  privateNodes?: DocumentToPrivateNodesResolver<TParent>;
  size?: DocumentToSizeResolver<TParent>;
  state?: DocumentToStateResolver<TParent>;
  status?: DocumentToStatusResolver<TParent>;
  updatedAt?: DocumentToUpdatedAtResolver<TParent>;
  userId?: DocumentToUserIdResolver<TParent>;
}

export interface DocumentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToExportDocumentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToFolderIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToGuestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToHashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToNodeArgs {
  node_ids?: Array<number | null>;
}
export interface DocumentToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: DocumentToNodeArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentToPrivacyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToPrivateNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentGuestOtTypeResolver<TParent = any> {
  accessLevel?: DocumentGuestOtToAccessLevelResolver<TParent>;
  email?: DocumentGuestOtToEmailResolver<TParent>;
  userId?: DocumentGuestOtToUserIdResolver<TParent>;
}

export interface DocumentGuestOtToAccessLevelResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentGuestOtToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentGuestOtToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeTypeResolver<TParent = any> {
  child_nodes?: NodeToChild_nodesResolver<TParent>;
  createdAt?: NodeToCreatedAtResolver<TParent>;
  documentId?: NodeToDocumentIdResolver<TParent>;
  fatherId?: NodeToFatherIdResolver<TParent>;
  father_id?: NodeToFather_idResolver<TParent>;
  hash?: NodeToHashResolver<TParent>;
  html?: NodeToHtmlResolver<TParent>;
  id?: NodeToIdResolver<TParent>;
  image?: NodeToImageResolver<TParent>;
  name?: NodeToNameResolver<TParent>;
  node_id?: NodeToNode_idResolver<TParent>;
  node_title_styles?: NodeToNode_title_stylesResolver<TParent>;
  privacy?: NodeToPrivacyResolver<TParent>;
  read_only?: NodeToRead_onlyResolver<TParent>;
  tags?: NodeToTagsResolver<TParent>;
  updatedAt?: NodeToUpdatedAtResolver<TParent>;
}

export interface NodeToChild_nodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToDocumentIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToFatherIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToFather_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToHashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToHtmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToImageArgs {
  thumbnail?: boolean;
}
export interface NodeToImageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: NodeToImageArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToNode_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToNode_title_stylesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToPrivacyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToRead_onlyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageTypeResolver<TParent = any> {
  base64?: ImageToBase64Resolver<TParent>;
  id?: ImageToIdResolver<TParent>;
}

export interface ImageToBase64Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateNodeTypeResolver<TParent = any> {
  father_id?: PrivateNodeToFather_idResolver<TParent>;
  node_id?: PrivateNodeToNode_idResolver<TParent>;
}

export interface PrivateNodeToFather_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateNodeToNode_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentStateTypeResolver<TParent = any> {
  bookmarks?: DocumentStateToBookmarksResolver<TParent>;
  lastOpenedAt?: DocumentStateToLastOpenedAtResolver<TParent>;
  pinned?: DocumentStateToPinnedResolver<TParent>;
  recentNodes?: DocumentStateToRecentNodesResolver<TParent>;
  scrollPositions?: DocumentStateToScrollPositionsResolver<TParent>;
  selectedNode_id?: DocumentStateToSelectedNode_idResolver<TParent>;
  treeState?: DocumentStateToTreeStateResolver<TParent>;
  updatedAt?: DocumentStateToUpdatedAtResolver<TParent>;
}

export interface DocumentStateToBookmarksResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentStateToLastOpenedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentStateToPinnedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentStateToRecentNodesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentStateToScrollPositionsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentStateToSelectedNode_idResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentStateToTreeStateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentStateToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeScrollPositionTypeResolver<TParent = any> {
  node_id?: NodeScrollPositionToNode_idResolver<TParent>;
  x?: NodeScrollPositionToXResolver<TParent>;
  y?: NodeScrollPositionToYResolver<TParent>;
}

export interface NodeScrollPositionToNode_idResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeScrollPositionToXResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeScrollPositionToYResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultEntityTypeResolver<TParent = any> {
  node?: SearchResultEntityToNodeResolver<TParent>;
}

export interface SearchResultEntityToNodeArgs {
  searchArgs?: NodeSearchIt;
}
export interface SearchResultEntityToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: SearchResultEntityToNodeArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeSearchResultsTypeResolver<TParent = any> {
  meta?: NodeSearchResultsToMetaResolver<TParent>;
  results?: NodeSearchResultsToResultsResolver<TParent>;
}

export interface NodeSearchResultsToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultsToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultMetaTypeResolver<TParent = any> {
  elapsedTimeMs?: SearchResultMetaToElapsedTimeMsResolver<TParent>;
  timestamp?: SearchResultMetaToTimestampResolver<TParent>;
}

export interface SearchResultMetaToElapsedTimeMsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultMetaToTimestampResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityTypeResolver<TParent = any> {
  ahtmlHeadline?: NodeSearchResultEntityToAhtmlHeadlineResolver<TParent>;
  ahtml_txt?: NodeSearchResultEntityToAhtml_txtResolver<TParent>;
  createdAt?: NodeSearchResultEntityToCreatedAtResolver<TParent>;
  documentId?: NodeSearchResultEntityToDocumentIdResolver<TParent>;
  documentName?: NodeSearchResultEntityToDocumentNameResolver<TParent>;
  nodeId?: NodeSearchResultEntityToNodeIdResolver<TParent>;
  nodeName?: NodeSearchResultEntityToNodeNameResolver<TParent>;
  nodeNameHeadline?: NodeSearchResultEntityToNodeNameHeadlineResolver<TParent>;
  node_id?: NodeSearchResultEntityToNode_idResolver<TParent>;
  tags?: NodeSearchResultEntityToTagsResolver<TParent>;
  tagsHeadline?: NodeSearchResultEntityToTagsHeadlineResolver<TParent>;
  updatedAt?: NodeSearchResultEntityToUpdatedAtResolver<TParent>;
}

export interface NodeSearchResultEntityToAhtmlHeadlineResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToAhtml_txtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToDocumentIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToDocumentNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToNodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToNodeNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToNodeNameHeadlineResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToNode_idResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToTagsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToTagsHeadlineResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeSearchResultEntityToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserQueryTypeResolver<TParent = any> {
  refreshToken?: UserQueryToRefreshTokenResolver<TParent>;
  userExists?: UserQueryToUserExistsResolver<TParent>;
  verifyTokenValidity?: UserQueryToVerifyTokenValidityResolver<TParent>;
}

export interface UserQueryToRefreshTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserQueryToUserExistsArgs {
  email: string;
}
export interface UserQueryToUserExistsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserQueryToUserExistsArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserQueryToVerifyTokenValidityArgs {
  token: string;
}
export interface UserQueryToVerifyTokenValidityResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserQueryToVerifyTokenValidityArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface AuthUserTypeResolver<TParent = any> {
  secrets?: AuthUserToSecretsResolver<TParent>;
  settings?: AuthUserToSettingsResolver<TParent>;
  token?: AuthUserToTokenResolver<TParent>;
  user?: AuthUserToUserResolver<TParent>;
}

export interface AuthUserToSecretsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthUserToSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthUserToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthUserToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecretsTypeResolver<TParent = any> {
  google_api_key?: SecretsToGoogle_api_keyResolver<TParent>;
  google_client_id?: SecretsToGoogle_client_idResolver<TParent>;
}

export interface SecretsToGoogle_api_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecretsToGoogle_client_idResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingsTypeResolver<TParent = any> {
  editorSettings?: SettingsToEditorSettingsResolver<TParent>;
  hotKeys?: SettingsToHotKeysResolver<TParent>;
}

export interface SettingsToEditorSettingsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingsToHotKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsTypeResolver<TParent = any> {
  codeBg?: EditorSettingsToCodeBgResolver<TParent>;
  codeFont?: EditorSettingsToCodeFontResolver<TParent>;
  codeFontSize?: EditorSettingsToCodeFontSizeResolver<TParent>;
  monospaceBg?: EditorSettingsToMonospaceBgResolver<TParent>;
  richTextBg?: EditorSettingsToRichTextBgResolver<TParent>;
  richTextColor?: EditorSettingsToRichTextColorResolver<TParent>;
  richTextFont?: EditorSettingsToRichTextFontResolver<TParent>;
  richTextFontSize?: EditorSettingsToRichTextFontSizeResolver<TParent>;
  treeBg?: EditorSettingsToTreeBgResolver<TParent>;
  treeColor?: EditorSettingsToTreeColorResolver<TParent>;
  treeFont?: EditorSettingsToTreeFontResolver<TParent>;
  treeFontSize?: EditorSettingsToTreeFontSizeResolver<TParent>;
  version?: EditorSettingsToVersionResolver<TParent>;
}

export interface EditorSettingsToCodeBgResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToCodeFontResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToCodeFontSizeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToMonospaceBgResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToRichTextBgResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToRichTextColorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToRichTextFontResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToRichTextFontSizeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToTreeBgResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToTreeColorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToTreeFontResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToTreeFontSizeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EditorSettingsToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HotKeysTypeResolver<TParent = any> {
  formatting?: HotKeysToFormattingResolver<TParent>;
  general?: HotKeysToGeneralResolver<TParent>;
}

export interface HotKeysToFormattingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HotKeysToGeneralResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HotKeyTypeResolver<TParent = any> {
  keys?: HotKeyToKeysResolver<TParent>;
  type?: HotKeyToTypeResolver<TParent>;
}

export interface HotKeyToKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HotKeyToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTypeResolver<TParent = any> {
  email?: UserToEmailResolver<TParent>;
  email_verified?: UserToEmail_verifiedResolver<TParent>;
  firstName?: UserToFirstNameResolver<TParent>;
  hasPassword?: UserToHasPasswordResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  lastName?: UserToLastNameResolver<TParent>;
  picture?: UserToPictureResolver<TParent>;
  tokens?: UserToTokensResolver<TParent>;
  username?: UserToUsernameResolver<TParent>;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmail_verifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToHasPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPictureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToTokensResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTokenTypeResolver<TParent = any> {
  id?: UserTokenToIdResolver<TParent>;
  meta?: UserTokenToMetaResolver<TParent>;
  type?: UserTokenToTypeResolver<TParent>;
}

export interface UserTokenToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTokenToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTokenToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTokenMetaTypeResolver<TParent = any> {
  currentEmail?: UserTokenMetaToCurrentEmailResolver<TParent>;
  newEmail?: UserTokenMetaToNewEmailResolver<TParent>;
}

export interface UserTokenMetaToCurrentEmailResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTokenMetaToNewEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserMetaQueriesTypeResolver<TParent = any> {
  folders?: UserMetaQueriesToFoldersResolver<TParent>;
  id?: UserMetaQueriesToIdResolver<TParent>;
  workspace?: UserMetaQueriesToWorkspaceResolver<TParent>;
}

export interface UserMetaQueriesToFoldersResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserMetaQueriesToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserMetaQueriesToWorkspaceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderTypeResolver<TParent = any> {
  id?: FolderToIdResolver<TParent>;
  name?: FolderToNameResolver<TParent>;
  settings?: FolderToSettingsResolver<TParent>;
  userId?: FolderToUserIdResolver<TParent>;
}

export interface FolderToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderSettingsTypeResolver<TParent = any> {
  icon?: FolderSettingsToIconResolver<TParent>;
  sortDocumentsBy?: FolderSettingsToSortDocumentsByResolver<TParent>;
}

export interface FolderSettingsToIconResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderSettingsToSortDocumentsByResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceTypeResolver<TParent = any> {
  currentDocumentId?: WorkspaceToCurrentDocumentIdResolver<TParent>;
  currentFolderId?: WorkspaceToCurrentFolderIdResolver<TParent>;
  currentScreen?: WorkspaceToCurrentScreenResolver<TParent>;
  folders?: WorkspaceToFoldersResolver<TParent>;
}

export interface WorkspaceToCurrentDocumentIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceToCurrentFolderIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceToCurrentScreenResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceToFoldersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationTypeResolver<TParent = any> {
  document?: MutationToDocumentResolver<TParent>;
  user?: MutationToUserResolver<TParent>;
  userMeta?: MutationToUserMetaResolver<TParent>;
}

export interface MutationToDocumentArgs {
  file_id?: string;
}
export interface MutationToDocumentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface MutationToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentMutationTypeResolver<TParent = any> {
  clone?: DocumentMutationToCloneResolver<TParent>;
  createDocument?: DocumentMutationToCreateDocumentResolver<TParent>;
  deleteDocument?: DocumentMutationToDeleteDocumentResolver<TParent>;
  editDocument?: DocumentMutationToEditDocumentResolver<TParent>;
  node?: DocumentMutationToNodeResolver<TParent>;
  setState?: DocumentMutationToSetStateResolver<TParent>;
  uploadFile?: DocumentMutationToUploadFileResolver<TParent>;
  uploadFromGDrive?: DocumentMutationToUploadFromGDriveResolver<TParent>;
}

export interface DocumentMutationToCloneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentMutationToCreateDocumentArgs {
  document: CreateDocumentIt;
}
export interface DocumentMutationToCreateDocumentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: DocumentMutationToCreateDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentMutationToDeleteDocumentArgs {
  documents: DeleteDocumentInputType;
}
export interface DocumentMutationToDeleteDocumentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: DocumentMutationToDeleteDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentMutationToEditDocumentArgs {
  meta: EditDocumentIt;
}
export interface DocumentMutationToEditDocumentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: DocumentMutationToEditDocumentArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentMutationToNodeArgs {
  node_id?: number;
}
export interface DocumentMutationToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: DocumentMutationToNodeArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentMutationToSetStateArgs {
  state: DocumentStateIt;
}
export interface DocumentMutationToSetStateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: DocumentMutationToSetStateArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentMutationToUploadFileArgs {
  files: Array<CTBUpload>;
}
export interface DocumentMutationToUploadFileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: DocumentMutationToUploadFileArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface DocumentMutationToUploadFromGDriveArgs {
  file: UploadLinkInputType;
}
export interface DocumentMutationToUploadFromGDriveResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: DocumentMutationToUploadFromGDriveArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeMutationTypeResolver<TParent = any> {
  createNode?: NodeMutationToCreateNodeResolver<TParent>;
  deleteNode?: NodeMutationToDeleteNodeResolver<TParent>;
  editMeta?: NodeMutationToEditMetaResolver<TParent>;
  saveAHtml?: NodeMutationToSaveAHtmlResolver<TParent>;
  uploadImage?: NodeMutationToUploadImageResolver<TParent>;
}

export interface NodeMutationToCreateNodeArgs {
  meta: CreateNodeIt;
}
export interface NodeMutationToCreateNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: NodeMutationToCreateNodeArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeMutationToDeleteNodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeMutationToEditMetaArgs {
  meta: Array<NodeMetaIt>;
}
export interface NodeMutationToEditMetaResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: NodeMutationToEditMetaArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeMutationToSaveAHtmlArgs {
  data: SaveHtmlIt;
}
export interface NodeMutationToSaveAHtmlResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: NodeMutationToSaveAHtmlArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface NodeMutationToUploadImageArgs {
  images: Array<ImageUpload>;
}
export interface NodeMutationToUploadImageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: NodeMutationToUploadImageArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationTypeResolver<TParent = any> {
  cancelEmailChangeToken?: UserMutationToCancelEmailChangeTokenResolver<
    TParent
  >;
  changeEmail?: UserMutationToChangeEmailResolver<TParent>;
  createEmailChangeToken?: UserMutationToCreateEmailChangeTokenResolver<
    TParent
  >;
  createEmailVerificationToken?: UserMutationToCreateEmailVerificationTokenResolver<
    TParent
  >;
  createPasswordResetToken?: UserMutationToCreatePasswordResetTokenResolver<
    TParent
  >;
  deleteAccount?: UserMutationToDeleteAccountResolver<TParent>;
  oauthSignUp?: UserMutationToOauthSignUpResolver<TParent>;
  resetPassword?: UserMutationToResetPasswordResolver<TParent>;
  signIn?: UserMutationToSignInResolver<TParent>;
  signUp?: UserMutationToSignUpResolver<TParent>;
  updateUserProfile?: UserMutationToUpdateUserProfileResolver<TParent>;
  updateUserSettings?: UserMutationToUpdateUserSettingsResolver<TParent>;
  verifyEmail?: UserMutationToVerifyEmailResolver<TParent>;
}

export interface UserMutationToCancelEmailChangeTokenArgs {
  input: CancelChangeEmailIt;
}
export interface UserMutationToCancelEmailChangeTokenResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToCancelEmailChangeTokenArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToChangeEmailArgs {
  input: ConfirmEmailChangeIt;
}
export interface UserMutationToChangeEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToChangeEmailArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToCreateEmailChangeTokenArgs {
  input: ChangeEmailIt;
}
export interface UserMutationToCreateEmailChangeTokenResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToCreateEmailChangeTokenArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToCreateEmailVerificationTokenResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserMutationToCreatePasswordResetTokenArgs {
  email: string;
  username: string;
}
export interface UserMutationToCreatePasswordResetTokenResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToCreatePasswordResetTokenArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToDeleteAccountArgs {
  currentPassword: string;
}
export interface UserMutationToDeleteAccountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToDeleteAccountArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToOauthSignUpArgs {
  credentials: OauthSignUpCredentials;
}
export interface UserMutationToOauthSignUpResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToOauthSignUpArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToResetPasswordArgs {
  input: ResetPasswordIt;
}
export interface UserMutationToResetPasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToResetPasswordArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToSignInArgs {
  credentials: SignInCredentials;
}
export interface UserMutationToSignInResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserMutationToSignInArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToSignUpArgs {
  credentials: SignUpCredentials;
}
export interface UserMutationToSignUpResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserMutationToSignUpArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToUpdateUserProfileArgs {
  userProfile: UpdateUserProfileIt;
}
export interface UserMutationToUpdateUserProfileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToUpdateUserProfileArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToUpdateUserSettingsArgs {
  userSettings: UpdateUserSettingsIt;
}
export interface UserMutationToUpdateUserSettingsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToUpdateUserSettingsArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMutationToVerifyEmailArgs {
  input: VerifyEmailIt;
}
export interface UserMutationToVerifyEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMutationToVerifyEmailArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMetaMutationsTypeResolver<TParent = any> {
  createFolders?: UserMetaMutationsToCreateFoldersResolver<TParent>;
  removeFolders?: UserMetaMutationsToRemoveFoldersResolver<TParent>;
  updateFolders?: UserMetaMutationsToUpdateFoldersResolver<TParent>;
}

export interface UserMetaMutationsToCreateFoldersArgs {
  folders: Array<CreateFolderIt>;
}
export interface UserMetaMutationsToCreateFoldersResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMetaMutationsToCreateFoldersArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMetaMutationsToRemoveFoldersArgs {
  folderIds: Array<string>;
}
export interface UserMetaMutationsToRemoveFoldersResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMetaMutationsToRemoveFoldersArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface UserMetaMutationsToUpdateFoldersArgs {
  folders: Array<UpdateFolderIt>;
}
export interface UserMetaMutationsToUpdateFoldersResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserMetaMutationsToUpdateFoldersArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface SubscriptionTypeResolver<TParent = any> {
  documentOperation?: SubscriptionToDocumentOperationResolver<TParent>;
}

export interface SubscriptionToDocumentOperationArgs {
  userId: string;
}
export interface SubscriptionToDocumentOperationResolver<
  TParent = any,
  TResult = any
> {
  resolve?: (
    parent: TParent,
    args: SubscriptionToDocumentOperationArgs,
    context: any,
    info: GraphQLResolveInfo,
  ) => TResult;
  subscribe: (
    parent: TParent,
    args: SubscriptionToDocumentOperationArgs,
    context: any,
    info: GraphQLResolveInfo,
  ) => AsyncIterator<TResult>;
}

export interface DocumentOperationTypeResolver<TParent = any> {
  context?: DocumentOperationToContextResolver<TParent>;
  id?: DocumentOperationToIdResolver<TParent>;
  progress?: DocumentOperationToProgressResolver<TParent>;
  state?: DocumentOperationToStateResolver<TParent>;
  target?: DocumentOperationToTargetResolver<TParent>;
  type?: DocumentOperationToTypeResolver<TParent>;
  userId?: DocumentOperationToUserIdResolver<TParent>;
}

export interface DocumentOperationToContextResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentOperationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentOperationToProgressResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentOperationToStateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentOperationToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentOperationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentOperationToUserIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTargetTypeResolver<TParent = any> {
  hash?: DocumentTargetToHashResolver<TParent>;
  id?: DocumentTargetToIdResolver<TParent>;
  name?: DocumentTargetToNameResolver<TParent>;
}

export interface DocumentTargetToHashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTargetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTargetToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
