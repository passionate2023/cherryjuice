// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rich-text snapshot tests adjacent images overlap 1`] = `
"<span class=\\"rich-text__line\\"><span>- we can think of callbacks as a continuation, a secondary half that runs after a time-gap that separates it from the first half</span></span><span class=\\"rich-text__line\\"><span>&quot;w</span><span style=\\"color:#e6e6e6;\\">hen we refer to functions as continuations, what we mean is, we did the first half of our program now, and we wrap the second half of our program up in a callback</span><span>&quot;</span></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>- the instructor suggests that callback hell doesnt actually have to do with indentation, as we could rewrite a &quot;callback hell&quot; without nesting</span></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:100px; height:100px;\\"
        class=\\"rich-text__image\\"
      /><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:200px; height:200px;\\"
        class=\\"rich-text__image\\"
      /></span><span class=\\"rich-text__line\\"><span>the instructor suggests that t</span><span style=\\"color:#e6e6e6;\\">here are two conceptually deficient</span><span> problems with callbacks</span></span>"
`;

exports[`rich-text snapshot tests empty newline ignored 1`] = `"<span class=\\"rich-text__line\\"><span>the instructor suggests</span></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>generators will solve</span></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>if a yield</span></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>instead </span></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>yield &gt; pause &gt; then &gt; it.next</span></span>"`;

exports[`rich-text snapshot tests monospace style not fully applied 1`] = `"<span class=\\"rich-text__line\\"><code style=\\"color:#89ddff;\\"><small>i </small></code><code ><small>a </small></code><code style=\\"color:#c792ea;\\"><small>f </small></code><code style=\\"color:#c3e88d;\\"><small>&#39;&#39;</small></code><code style=\\"color:#89ddff;\\"><small>;</small></code></span><span class=\\"rich-text__line\\"><code style=\\"color:#89ddff;\\"><small>import * </small></code><code style=\\"color:#c792ea;\\"><small>f </small></code><code style=\\"color:#c3e88d;\\"><small>&#39;&#39;</small></code><code style=\\"color:#89ddff;\\"><small>;</small></code></span>"`;

exports[`rich-text snapshot tests offset images 1`] = `
"<span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><code style=\\"color:#c792ea;\\"><small><em>let </em></small></code><code ><small><em>it </em></small></code><code style=\\"color:#89ddff;\\"><small><em>= </em></small></code><code style=\\"color:#82aaff;\\"><small><em>gen</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>()</em></small></code><code style=\\"color:#89ddff;\\"><small><em>;</em></small></code></span><span class=\\"rich-text__line\\"><code style=\\"background-color:#9a1197;color:#c792ea;\\"><small><em>console</em></small></code><code style=\\"background-color:#9a1197;color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"background-color:#9a1197;color:#82aaff;\\"><small><em>log</em></small></code><code style=\\"background-color:#9a1197;color:#f78c6c;\\"><small><em>(</em></small></code><code style=\\"background-color:#9a1197;\\"><small><em>it</em></small></code><code style=\\"background-color:#9a1197;color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"background-color:#9a1197;color:#82aaff;\\"><small><em>next</em></small></code><code style=\\"background-color:#9a1197;color:#f78c6c;\\"><small><em>())</em></small></code><code style=\\"background-color:#9a1197;color:#89ddff;\\"><small><em>;</em></small></code></span><span class=\\"rich-text__line\\"><code style=\\"background-color:#498b49;color:#c792ea;\\"><small><em>console</em></small></code><code style=\\"background-color:#498b49;color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"background-color:#498b49;color:#82aaff;\\"><small><em>log</em></small></code><code style=\\"background-color:#498b49;color:#f78c6c;\\"><small><em>(</em></small></code><code style=\\"background-color:#498b49;\\"><small><em>it</em></small></code><code style=\\"background-color:#498b49;color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"background-color:#498b49;color:#82aaff;\\"><small><em>next</em></small></code><code style=\\"background-color:#498b49;color:#f78c6c;\\"><small><em>(5))</em></small></code><code style=\\"background-color:#498b49;color:#89ddff;\\"><small><em>;</em></small></code></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:100px; height:100px;\\"
        class=\\"rich-text__image\\"
      /></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>example2</span></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:200px; height:200px;\\"
        class=\\"rich-text__image\\"
      /></span><span class=\\"rich-text__line\\"><span>(run is equivalent to it.next)</span></span>"
`;

exports[`rich-text snapshot tests offset images 2`] = `
"<span class=\\"rich-text__line\\"><code style=\\"background-color:#498b49;color:#89ddff;\\"><small><em> </em></small></code><code style=\\"background-color:#498b49;color:#ffffff;\\"><small><em> 5</em></small></code></span><span class=\\"rich-text__line\\"><code style=\\"background-color:#498b49;color:#89ddff;\\"><small><em>  </em></small></code><code style=\\"background-color:#498b49;color:#c792ea;\\"><small><em>let </em></small></code><code style=\\"background-color:#498b49;\\"><small><em>y </em></small></code><code style=\\"background-color:#498b49;color:#89ddff;\\"><small><em>= </em></small></code><code style=\\"background-color:#498b49;color:#f78c6c;\\"><small><em>0 </em></small></code><code style=\\"background-color:#498b49;color:#89ddff;\\"><small><em>+ </em></small></code></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:100px; height:100px;\\"
        class=\\"rich-text__image\\"
      /></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>example2</span></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:200px; height:200px;\\"
        class=\\"rich-text__image\\"
      /></span><span class=\\"rich-text__line\\"><span>(run is equivalent to it.next)</span></span>"
`;

exports[`rich-text snapshot tests offset images, tables, and codebox 1`] = `
"<span class=\\"rich-text__line\\"><span>- fr</span><span style=\\"color:#ffffff;\\"> and </span><code style=\\"color:#ffffff;\\">split</code><span style=\\"color:#ffffff;\\">.</span></span><span class=\\"rich-text__line\\"><table class=\\"rich-text__table\\" 
        data-col_max_width=\\"100\\"
        data-col_min_width=\\"100\\"
        >
      <thead>
        <th >name</th><th >age</th>
      </thead>
      <tbody>
        <tr >
            <td >yacine</td><td >26</td>
          </tr><tr >
            <td >kamel</td><td >27</td>
          </tr><tr >
            <td >hachemi</td><td >26</td>
          </tr><tr >
            <td ></td><td ></td>
          </tr><tr >
            <td ></td><td ></td>
          </tr><tr >
            <td >amine</td><td >26</td>
          </tr>
      </tbody>
    </table></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>&gt;regex functions</span></span><span class=\\"rich-text__line\\"><span>a) regex.test returns a boolean if the pattern matches</span></span><span class=\\"rich-text__line\\"><code style=\\"color:#c792ea;\\"><small><em>let </em></small></code><code ><small><em>str </em></small></code><code style=\\"color:#89ddff;\\"><small><em>= </em></small></code><code style=\\"color:#c3e88d;\\"><small><em>\`Is this This?\`</em></small></code><code style=\\"color:#89ddff;\\"><small><em>;</em></small></code></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><code style=\\"color:#c792ea;\\"><small><em>console</em></small></code><code style=\\"color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"color:#82aaff;\\"><small><em>log</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>(</em></small></code><code style=\\"color:#c3e88d;\\"><small><em>/isd/g</em></small></code><code style=\\"color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"color:#82aaff;\\"><small><em>test</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>(</em></small></code><code ><small><em>str</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>))</em></small></code><code style=\\"color:#89ddff;\\"><small><em>; </em></small></code><code style=\\"color:#546e7a;\\"><small><em>// false</em></small></code></span><span class=\\"rich-text__line\\"><code style=\\"color:#c792ea;\\"><small><em>console</em></small></code><code style=\\"color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"color:#82aaff;\\"><small><em>log</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>(</em></small></code><code style=\\"color:#c3e88d;\\"><small><em>/is/g</em></small></code><code style=\\"color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"color:#82aaff;\\"><small><em>test</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>(</em></small></code><code ><small><em>str</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>))</em></small></code><code style=\\"color:#89ddff;\\"><small><em>; </em></small></code><code style=\\"color:#546e7a;\\"><small><em>// true</em></small></code></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>b) regex.exec returns a regexArray</span></span><span class=\\"rich-text__line\\"><code style=\\"color:#c792ea;\\"><small><em>let </em></small></code><code ><small><em>str </em></small></code><code style=\\"color:#89ddff;\\"><small><em>= </em></small></code><code style=\\"color:#c3e88d;\\"><small><em>\`Is this This?\`</em></small></code><code style=\\"color:#89ddff;\\"><small><em>;</em></small></code></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><code style=\\"color:#c792ea;\\"><small><em>let </em></small></code><code ><small><em>regex </em></small></code><code style=\\"color:#89ddff;\\"><small><em>= </em></small></code><code style=\\"color:#c3e88d;\\"><small><em>/is/g</em></small></code><code style=\\"color:#89ddff;\\"><small><em>;</em></small></code></span><span class=\\"rich-text__line\\"><code style=\\"color:#c792ea;\\"><small><em>console</em></small></code><code style=\\"color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"color:#82aaff;\\"><small><em>log</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>(</em></small></code><code ><small><em>regex</em></small></code><code style=\\"color:#89ddff;\\"><small><em>.</em></small></code><code style=\\"color:#82aaff;\\"><small><em>exec</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>(</em></small></code><code ><small><em>str</em></small></code><code style=\\"color:#f78c6c;\\"><small><em>))</em></small></code><code style=\\"color:#89ddff;\\"><small><em>;</em></small></code></span><span class=\\"rich-text__line\\"><code style=\\"color:#546e7a;\\"><small><em>// [ &#39;is&#39;, index: 5, input: &#39;Is this This?&#39;, groups: undefined ]</em></small></code></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>unlike </span><code ><small>test</small></code><span>, the </span><code ><small>exec</small></code><span> method is stateful: </span></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:100px; height:100px;\\"
        class=\\"rich-text__image\\"
      /></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>&gt;string functions</span></span><span class=\\"rich-text__line\\"><span>a) </span><code ><small>str.match</small></code></span><span class=\\"rich-text__line\\"><em style=\\"color:#c792ea;\\">let </em><em >str </em><em style=\\"color:#89ddff;\\">= </em><em style=\\"color:#c3e88d;\\">\`Is this This?\`</em><em style=\\"color:#89ddff;\\">;</em></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>&gt;basic regex playground using </span><code ><small>str.replace</small></code></span><span class=\\"rich-text__line\\"><span>&#8203;</span><code
      class=\\"rich-text__code\\"
      data-do_highl_bra=\\"1\\" 
      data-is_width_pix=\\"1\\"
      data-is_width_pix=\\"1\\"
      data-do_show_linenum=\\"undefined\\"
      data-width_raw=\\"100\\"
      data-syntax= \\"js\\"
      style=\\"
        max-width: 100px;
        width: 100px;
        min-height: 100px;
        height: 100px;\\"
    >
      <span class=\\"rich-text__code__line\\">codebox0</span>
    </code><span>&#8203;</span></span><span class=\\"rich-text__line\\"><span>&#8203;</span><code
      class=\\"rich-text__code\\"
      data-do_highl_bra=\\"1\\" 
      data-is_width_pix=\\"1\\"
      data-is_width_pix=\\"1\\"
      data-do_show_linenum=\\"undefined\\"
      data-width_raw=\\"200\\"
      data-syntax= \\"js\\"
      style=\\"
        max-width: 200px;
        width: 200px;
        min-height: 200px;
        height: 200px;\\"
    >
      <span class=\\"rich-text__code__line\\">codebox1</span>
    </code><span>&#8203;</span></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:200px; height:200px;\\"
        class=\\"rich-text__image\\"
      /></span><span class=\\"rich-text__line\\"><span>*</span></span><span class=\\"rich-text__line\\"><span>&gt;my react alternative</span></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:300px; height:300px;\\"
        class=\\"rich-text__image\\"
      /></span><span class=\\"rich-text__line\\"><span>- full code</span></span><span class=\\"rich-text__line\\"><code style=\\"color:#89ddff;\\"><small><em>i</em></small></code></span>"
`;

exports[`rich-text snapshot tests tailing image not rendered 1`] = `
"<span class=\\"rich-text__line\\"><span>promises can be chained together</span></span><span class=\\"rich-text__line\\"><span>&gt;example</span></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:100px; height:100px;\\"
        class=\\"rich-text__image\\"
      /></span><span class=\\"rich-text__line\\"><span>the </span><code ><small>.then</small></code><span> on line 5 will &quot;magically&quot; wait for the promise from line 3</span></span><span class=\\"rich-text__line\\"></span><span class=\\"rich-text__line\\"><span>&gt;example2</span></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:200px; height:200px;\\"
        class=\\"rich-text__image\\"
      /></span>"
`;

exports[`rich-text snapshot tests tailing image not rendered 2`] = `
"<span class=\\"rich-text__line\\"><span>haha</span></span><span class=\\"rich-text__line\\"><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:100px; height:100px;\\"
        class=\\"rich-text__image\\"
      /><img src=\\"\\"
        alt=\\"\\"
        style=\\"width:200px; height:200px;\\"
        class=\\"rich-text__image\\"
      /></span>"
`;
